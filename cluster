/**
 * Function to mask clouds using the Sentinel-2 QA band
 * @param {ee.Image} image Sentinel-2 image
 * @return {ee.Image} cloud masked Sentinel-2 image
 */
function maskS2clouds(image) {
  var qa = image.select('QA60');

  // Bits 10 and 11 are clouds and cirrus, respectively.
  var cloudBitMask = 1 << 10;
  var cirrusBitMask = 1 << 11;

  // Both flags should be set to zero, indicating clear conditions.
  var mask = qa.bitwiseAnd(cloudBitMask).eq(0)
      .and(qa.bitwiseAnd(cirrusBitMask).eq(0));

  return image.updateMask(mask).divide(10000);
}

var dataset = ee.ImageCollection('COPERNICUS/S2_SR')
                  .filterDate('2020-01-01', '2020-01-30')
                  // Pre-filter to get less cloudy granules.
                  .filter(ee.Filter.lt('CLOUDY_PIXEL_PERCENTAGE',20))
                  .map(maskS2clouds);

print(dataset.count())
var rectangle = ROI1;
var ds=dataset.mean().select(['B2','B3','B4','B5','B8'])
print(ds,"ds")
var ds1=ds.clip(rectangle)
var res = ee.Algorithms.Image.Segmentation.SNIC(ds1)
print(res,"res")
var visualization = {
  min: 0.0,
  max: 10,
  bands:['clusters']
};
var visualizationk = {
  min: 0.0,
  max: 10,
  bands:['cluster']
};
var visualization1 = {
  min: 0.0,
  max: 0.3,
  bands: ['B4', 'B3', 'B2'],
};

Map.setCenter(105.078687, 37.679496, 14);
//Map.addLayer(rectangle)

Map.addLayer(res, visualization, 'segmention');
Map.addLayer(ds1, visualization1, 'ds');


/*var selection = dataset.filterBounds(ROI1)
                  .filterDate("2018","2020")
                  .filterMetadata("CLOUD_COVER","less_than",10)
                  .mean()
 */
var selection = ds1
//Map.addLayer(selection,visualization1,'sl')
var training_data = selection.sample({
  region:ROI1,
  scale:20,
  numPixels:100
})
print(training_data)

var clusterer = ee.Clusterer.wekaXMeans()
clusterer=clusterer.train(training_data)

var clastered = selection.cluster(clusterer)
print(clastered)
Map.addLayer(clastered,visualizationk,'kmean')
